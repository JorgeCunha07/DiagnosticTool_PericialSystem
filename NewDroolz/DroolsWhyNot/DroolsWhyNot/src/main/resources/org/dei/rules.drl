/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.dei;
import org.dei.facts.Classif
import org.dei.facts.Fruit
import org.dei.facts.Values

import org.dei.facts.Evidence;

global java.util.List triggeredRules;
global org.slf4j.Logger LOG;

rule "R01: fruit banana"
when
    Evidence( id == "shape", val == Values.LONG )
    (Evidence( id == "color", val == Values.GREEN ) or Evidence( id == "color", val == Values.YELLOW ))
then
    Fruit e = new Fruit(Values.BANANA);
    insert(e);
    LOG.info("Conclusion->" + e);
    triggeredRules.add(drools.getRule().getName());
end

rule "R02: fruitclass vine"
when
    (Evidence( id == "shape", val == Values.ROUND ) or Evidence( id == "shape", val == Values.OBLONG ))
    Evidence( id == "diameter", val >= 4)
then
    Classif c = new Classif("fruitclass", Values.VINE);
    insert(c);
    LOG.info("Conclusion->" + c);
    triggeredRules.add(drools.getRule().getName());
end

rule "R03: fruitclass tree"
when
    Evidence( id == "shape", val == Values.ROUND )
    Evidence( id == "diameter", val < 4)
then
    Classif c = new Classif("fruitclass", Values.TREE);
    insert(c);
    LOG.info("Conclusion->" + c);
    triggeredRules.add(drools.getRule().getName());
end

rule "R04: seedclass stonefruit"
when
    Evidence( id == "seedcount", val == 1 )
then
    Classif c = new Classif("seedclass", Values.STONEFRUIT);
    insert(c);
    LOG.info("Conclusion->" + c);
    triggeredRules.add(drools.getRule().getName());
end

rule "R05: seedclass multiple"
when
    Evidence( id == "seedcount", val > 1 )
then
    Classif c = new Classif("seedclass", Values.MULTIPLE);
    insert(c);
    LOG.info("Conclusion->" + c);
    triggeredRules.add(drools.getRule().getName());
end

rule "R06: fruit watermelon"
when
    Classif( id == "fruitclass", val == Values.VINE )
    Evidence( id == "color", val == Values.GREEN )
then
    Fruit f = new Fruit(Values.WATERMELON);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R07: fruit honeydew"
when
    Classif( id == "fruitclass", val == Values.VINE )
    Evidence( id == "surface", val == Values.SMOOTH)
    Evidence( id == "color", val == Values.YELLOW )
then
    Fruit f = new Fruit(Values.HONEYDEW);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R08: fruit cantolope"
when
    Classif( id == "fruitclass", val == Values.VINE )
    Evidence( id == "surface", val == Values.ROUGH)
    Evidence( id == "color", val == Values.TAM )
then
    Fruit f = new Fruit(Values.CANTOLOPE);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R09: fruit apricot"
when
    Classif( id == "fruitclass", val == Values.TREE )
    Evidence( id == "color", val == Values.ORANGE )
    Classif( id == "seedclass", val == Values.STONEFRUIT)
then
    Fruit f = new Fruit(Values.APRICOT);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R10: fruit orange"
when
    Classif( id == "fruitclass", val == Values.TREE )
    Evidence( id == "color", val == Values.ORANGE )
    Classif( id == "seedclass", val == Values.MULTIPLE)
then
    Fruit f = new Fruit(Values.ORANGE);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R11: fruit cherry"
when
    Classif( id == "fruitclass", val == Values.TREE )
    Evidence( id == "color", val == Values.RED )
    Classif( id == "seedclass", val == Values.STONEFRUIT)
then
    Fruit f = new Fruit(Values.CHERRY);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R12: fruit peach"
when
    Classif( id == "fruitclass", val == Values.TREE )
    Evidence( id == "color", val == Values.ORANGE )
    Classif( id == "seedclass", val == Values.STONEFRUIT)
then
    Fruit f = new Fruit(Values.PEACH);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R13: fruit apple"
when
    Classif( id == "fruitclass", val == Values.TREE )
    ( Evidence( id == "color", val == Values.RED ) or Evidence( id == "color", val == Values.YELLOW ) )
    Classif( id == "seedclass", val == Values.MULTIPLE)
then
    Fruit f = new Fruit(Values.APPLE);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

rule "R14: fruit plum"
when
    Classif( id == "fruitclass", val == Values.TREE )
    Evidence( id == "color", val == Values.PURPLE )
    Classif( id == "seedclass", val == Values.STONEFRUIT)
then
    Fruit f = new Fruit(Values.PLUM);
    insert(f);
    LOG.info("Conclusion->" + f);
    triggeredRules.add(drools.getRule().getName());
end

query getEvidence(String id, Values val)
    $ev : Evidence( id := id, val := val) // := unification
end






