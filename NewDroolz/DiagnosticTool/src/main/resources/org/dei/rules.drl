package org.dei;

import org.dei.facts.Resposta;
import org.dei.facts.model.Carro;
import org.dei.facts.model.Componente;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;

global java.util.List carros;
global java.util.List<String> triggeredRules;
global org.slf4j.Logger LOG;

// Rule 00: Lista marcas disponíveis
rule "R00: Lista Marcas Disponíveis"
    when
        $resposta : Resposta(estado == null || estado == "")
    then
        // Cast carros to List<Carro>
        List<Carro> carrosList = (List<Carro>) carros;

        // Usar um Set para evitar duplicação
        Set<String> marcasDisponiveis = new HashSet<>();
        for (Carro carro : carrosList) {
            marcasDisponiveis.add(carro.getMarca().getNome());
        }

        // Armazena as marcas disponíveis na resposta
        StringBuilder marcasMsg = new StringBuilder("Marcas disponíveis: ");
        for (String marca : marcasDisponiveis) {
            marcasMsg.append(marca).append("\n");
        }

        $resposta.setPergunta(marcasMsg.toString());
        $resposta.setEstado("aguardandoMarca");
        update($resposta);
end

// Rule 01: Pergunta Marca do Carro
rule "R01: Pergunta Marca do Carro"
    when
        $resposta : Resposta(estado == null || estado == "")
    then
        $resposta.setPergunta("Qual é a marca do carro?");
        $resposta.setEstado("aguardandoMarca");
        update($resposta);
end

// Rule 02: Verifica Marca Selecionada (válida)
rule "R02: Verifica Marca Selecionada"
    when
        $resposta : Resposta(estado == "aguardandoMarca", $texto : texto != null && texto != "")
        exists (Carro( marca.getNome() == $texto ) from carros)
    then
        $resposta.setMarcaSelecionada($texto);

        // Cast carros to List<Carro>
        List<Carro> carrosList = (List<Carro>) carros;

        // Listar modelos disponíveis para a marca selecionada
        Set<String> modelosDisponiveis = new HashSet<>();
        for (Carro carro : carrosList) {
            if (carro.getMarca().getNome().equals($texto)) {
                modelosDisponiveis.add(carro.getModelo().getNome());
            }
        }

        StringBuilder modelosMsg = new StringBuilder("Modelos disponíveis: ");
        for (String modelo : modelosDisponiveis) {
            modelosMsg.append(modelo).append("\n");
        }

        $resposta.setPergunta("Marca selecionada: " + $texto + "\n" + modelosMsg.toString());
        $resposta.setEstado("aguardandoModelo");
        $resposta.setTexto(""); // Limpa o texto para a próxima entrada
        update($resposta);
end

// Rule 02b: Marca inválida
rule "R02b: Marca Inválida"
    when
        $resposta : Resposta(estado == "aguardandoMarca", $texto : texto != null && texto != "")
        not (Carro( marca.getNome() == $texto ) from carros)
    then
        $resposta.setPergunta("Marca não encontrada. Por favor, tente novamente.");
        $resposta.setTexto(""); // Limpa o texto para repetir a pergunta
        update($resposta);
end

// Rule 03: Pergunta Modelo do Carro
rule "R03: Pergunta Modelo do Carro"
    when
        $resposta : Resposta(estado == "aguardandoModelo", texto == "")
    then
        $resposta.setPergunta("Qual é o modelo do carro?");
        update($resposta);
end

// Rule 04: Verifica Modelo Selecionado (válido)
rule "R04: Verifica Modelo Selecionado"
    when
        $resposta : Resposta(estado == "aguardandoModelo", $texto : texto != null && texto != "")
        $marcaSelecionada : String() from $resposta.getMarcaSelecionada()
        exists (Carro( marca.getNome() == $marcaSelecionada, modelo.getNome() == $texto ) from carros)
    then
        $resposta.setModeloSelecionado($texto);

        // Cast carros to List<Carro>
        List<Carro> carrosList = (List<Carro>) carros;

        // Listar motores disponíveis para o modelo selecionado
        Set<String> motoresDisponiveis = new HashSet<>();
        for (Carro carro : carrosList) {
            if (carro.getMarca().getNome().equals($marcaSelecionada)
                && carro.getModelo().getNome().equals($texto)) {
                motoresDisponiveis.add(carro.getMotor().getNome());
            }
        }

        StringBuilder motoresMsg = new StringBuilder("Motores disponíveis: ");
        for (String motor : motoresDisponiveis) {
            motoresMsg.append(motor).append("\n");
        }

        $resposta.setPergunta("Modelo selecionado: " + $texto + "\n" + motoresMsg.toString());
        $resposta.setEstado("aguardandoMotor");
        $resposta.setTexto(""); // Limpa o texto para a próxima entrada
        update($resposta);
end

// Rule 04b: Modelo inválido
rule "R04b: Modelo Inválido"
    when
        $resposta : Resposta(estado == "aguardandoModelo", $texto : texto != null && texto != "")
        $marcaSelecionada : String() from $resposta.getMarcaSelecionada()
        not (Carro( marca.getNome() == $marcaSelecionada, modelo.getNome() == $texto ) from carros)
    then
        $resposta.setPergunta("Modelo não encontrado para a marca selecionada. Por favor, tente novamente.");
        $resposta.setTexto(""); // Limpa o texto para repetir a pergunta
        update($resposta);
end

// Rule 05: Pergunta Motor do Carro
rule "R05: Pergunta Motor do Carro"
    when
        $resposta : Resposta(estado == "aguardandoMotor", texto == "")
    then
        $resposta.setPergunta("Qual é o motor do carro?");
        update($resposta);
end

// Rule 06: Verifica Motor Selecionado e Armazena Carro Selecionado (válido)
rule "R06: Verifica Motor Selecionado"
    when
        $resposta : Resposta(estado == "aguardandoMotor", $texto : texto != null && texto != "")
        $marcaSelecionada : String() from $resposta.getMarcaSelecionada()
        $modeloSelecionado : String() from $resposta.getModeloSelecionado()
        $carroSelecionado : Carro(
            marca.getNome() == $marcaSelecionada,
            modelo.getNome() == $modeloSelecionado,
            motor.getNome() == $texto
        ) from carros
    then
        $resposta.setMotorSelecionado($texto);
        $resposta.setCarroSelecionado($carroSelecionado);

        StringBuilder componentesMsg = new StringBuilder("Componentes disponíveis: ");
        for (Componente componente : $carroSelecionado.getComponentes()) {
            componentesMsg.append(componente.getNome())
                          .append(" (Min Ideal: ").append(componente.getValorMinimoIdeal())
                          .append(", Max Ideal: ").append(componente.getValorMaximoIdeal())
                          .append(", Unidade: ").append(componente.getUnidade()).append(")\n");
        }

        $resposta.setPergunta("Motor selecionado: " + $texto + "\n" + componentesMsg.toString());
        $resposta.setEstado("finalizado");
        $resposta.setTexto(""); // Limpa o texto
        update($resposta);
end

// Rule 06b: Motor inválido
rule "R06b: Motor Inválido"
    when
        $resposta : Resposta(estado == "aguardandoMotor", $texto : texto != null && texto != "")
        $marcaSelecionada : String() from $resposta.getMarcaSelecionada()
        $modeloSelecionado : String() from $resposta.getModeloSelecionado()
        not (Carro(
            marca.getNome() == $marcaSelecionada,
            modelo.getNome() == $modeloSelecionado,
            motor.getNome() == $texto
        ) from carros)
    then
        $resposta.setPergunta("Motor não encontrado para o modelo e marca selecionados. Por favor, tente novamente.");
        $resposta.setTexto(""); // Limpa o texto para repetir a pergunta
        update($resposta);
end
